#include <stdio.h>
#include <stdlib.h>
 
// Inicia matriz do jogo
char matrix[3][3];
 
char check(void);
void init_matrix(void);
void get_player_move(void);
void get_computer_move(void);
void display_matrix(void);
 
void main(void) {
    char done;
    printf("Este é o jogo da velha.\n");
    printf("Você estará jogando contra o computador.\n");
    done = ' ';
    init_matrix();
    do {
        display_matrix();
        get_player_move();
        // Verifica se á vencedor
        done = check();
        if (done != ' ') break;
        get_computer_move();
        done = check();
    } while (done == ' ');
 
    if (done == 'X') printf("Você ganhou!\n");
    else printf("Eu ganhei!\n");
    // Exibe as posições finais
    display_matrix();
}
 
/**
 * Inicializa a matriz com valores em branco
 */
void init_matrix(void) {
    int i, j;
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++) matrix[i][j] = ' ';
}
 
/**
 * Pede ao usuário, aonde quer jogar, e então marca com X esta posição
 */
void get_player_move(void) {
    int x, y;
    printf("Entre com as coordenadas para o X: ");
    scanf("%d%d", &x, &y);
    x--;
    y--;
    if (matrix[x][y] != ' ') {
        printf("Posição inválida, tente novamente.\n");
        get_player_move();
    } else matrix[x][y] = 'X';
}
 
void get_computer_move(void) {
    int i, j;
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++)
            if (matrix[i][j] == ' ') break;
        if (matrix[i][j] == ' ') break;
    }
    if (i * j == 9) {
        printf("empate\n");
        exit(0);
    } else
        matrix[i][j] = '0';
}
 
void display_matrix(void) {
    int t;
    for (t = 0; t < 3; t++) {
        printf(" %c | %c | %c ", matrix[t][0], matrix[t][1],
                matrix[t][2]);
        if (t != 2) printf("\n---|---|---\n");
    }
    printf("\n");
}
 
/*
 * Verifica se há algum vencedor
 */
char check(void) {
    int i;
    // Verifica as linhas
    for (i = 0; i < 3; i++)
        if (matrix[i][0] == matrix[i][1] &&
                matrix[i][0] == matrix[i][2]) return matrix[i][0];
 
    // Verifica as colunas
    for (i = 0; i < 3; i++)
        if (matrix[0][i] == matrix[1][i] &&
                matrix[0][i] == matrix[2][i]) return matrix[0][i];
 
    // Verifica diagonais
    if (matrix[0][0] == matrix[1][1] && matrix[1][1] == matrix[2][2])
        return matrix[0][0];
    if (matrix[0][2] == matrix[1][1] && matrix[1][1] == matrix[2][0])
        return matrix[0][2];
 
    // Se não encontrou vencedor, retorna espaço
    return ' ';
}